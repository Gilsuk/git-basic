## merge?
브랜치를 나누어 작업하다보면 브랜치간 작업 상황이 달라질 수 있다.
미완성이거나 개발에 실패한 브랜치가 아니라면 모든 브랜치는 하나로 합쳐져야
의미가 있다. 이 과정이 merge다.

병합은 '두' 개의 커밋을 합치는 과정이다.

모든 커밋은 자신의 부모커밋을 기록하고 있다. 커밋 내역이
INIT -> C1 -> C2 -> C3
라고 할 때, C3는 C2를 알고 있고, C2는 C1을 알고 있다.

따라서, 브랜치가 어디서 갈라지던, 공통 부모는 존재한다. 이 공통 부모와
합치려는 두 커밋을 활용하여 merge가 된다.

## 병합하기
>> git merge <branch_name>
이는, 현재 브랜치를 기준으로 <branch_name>을 병합하는 것이다.
현재 브랜치를 <branch_name>에 병합하는 것이 아니다.

master 브랜치가 메인 브랜치이고, 기능을 추가하고자 dev1 브랜치를 만들어서
기능을 추가가 완료되었고, 이를 master에 반영하고 싶다면
우선 master 브랜치로 이동한 후에
>> git checkout master
dev1을 병합한다.
>> git merge dev1  
개발이 완료된 dev1을 더 유지할 이유가 없다면, 삭제한다.
>> git branch -d dev1
추가 기능이 필요하면, 다시 새로운 브랜치를 만들어서 시작하면 된다.

## 병합의 두 가지 방식

### fast-forward 병합
아래와 같은 커밋 내역이 있을 때,
INIT -> M1 -> M2 (master)
               ↓
              B1 -> B2 (dev1)
브랜치는 두 개지만, 사실상 하나의 작업이 선형으로 이루어진 구조이다.
이 경우에 병합을 하면 master 브랜치가 B2 커밋을 가리키는 것으로 병합이 끝난다.
충돌도 없고, 커밋도 없다.

### 3-way merge
master 브랜치의 M3 커밋으로부터 갈라져 나와서 login 기능을 개발하는 브랜치와
그 login 브랜치에서 갈라진 naver-login 브랜치가 있다고 하자.
naver-login 은 login에 합쳐져야하고, login은 다시 master에 병합되어야한다.

커밋 내역은 아래와 같다.
M3 -> L1 -> L2 (login)
       ↓
      N1 -> N2 (naver-login)

