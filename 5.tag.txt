## tag?
모든 커밋에는 고유한 해시값이 있어서 이 해시값으로 커밋에 접근할 수 있는데,
40자리의 16진수로 이루어진 해시값은 읽기도 어렵고 기억하기도 어렵다.
그래서 사람이 읽을 수 있는 별도의 이름을 붙이는데 이 이름을 '태그'라 한다.

모든 커밋에 이름을 붙일 필요는 없다. 중요하거나 기억할 필요가 있는 태그에
이름을 붙이면 된다. ex)버전넘버가 올라가는 시점에 버전넘버를 태그로 붙인다.

## Hash
개별 커밋간 구분을 위해서 git이 자동으로 커밋에 붙이는 이름이다.
40자리의 16진수로 구성되어 사용하기 매우 어려우므로
중복되지 않는 범위에서 앞에 임의의 자리수만 떼서 사용해도 된다.
ex) a6b4c97498bd301d84096da251c98a07c7723e65 값을
a6b4 로만 적어도 같은 것으로 인식하지만, 너무 적은 자리수로 컷하면 중복된 해시가
존재할 가능성이 있으므로 프로젝트 규모에 따라서 8~12 자리 정도를 사용하면 좋다.

## 브랜치와의 차이점
태그는 특정 커밋을 직접 가리키고 있는 커밋의 또다른 이름이지만,
브랜치는 가장 최근의 커밋으로 가리키는 대상을 계속 옮긴다.
즉, 커밋하고 곧바로 태그를 달았다면 브랜치와 태그는 같은 커밋을 지칭하지만
이후 여러번 커밋을 더 하게 되면 태그는 여전히 예전의 커밋을 가리키는 반면,
브랜치는 가장 최신의 커밋으로 가리키므로 서로 달라지게 된다.

## 태그 목록 확인
>> git tag

## 태그 만들기
>> git tag <tag_name>

## 이미 지나간 커밋에 태그 달기
커밋이 여러번 최신으로 갱신된 상태에서 예전 커밋에 태그를 달고 싶을 때
명령어의 가장 마지막에 태그를 붙이고 싶은 커밋의 해시값을 붙여주면 된다.
>> git tag <tag_name> <hash>

## 자세한 태그 만들기
태그에 이름만 붙여서는 태그가 정확히 무엇을 가리키려고 하는지 불명확할 때,
예를들어 특정한 버그가 발견된 지점을 표시하고자 할 때, bug_07 같은 태그명칭보다는
무슨 버그인지 자세히 설명해야할 필요가 있다. 이럴 때, 태그에 설명을 덧붙일 수 있는데
>> git tag -a <tag_name> -m "message for tag"

*자세한 태그에도 마지막에 해시값을 붙여주는 방식으로 이전 커밋에 태그를 달 수 있다.